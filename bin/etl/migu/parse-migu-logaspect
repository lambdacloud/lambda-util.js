#!/usr/bin/env node

/**
 * LambdaCloud copyright 2015.
 *
 * The tool to convert migu function log to lambdacloud format message
 * It support the stdin for input stream and output to the stdout
 *
 */
'use strict';

var _ = require('lodash');
var eventStream = require('event-stream');
var format = require('string-template');
var moment = require('moment');
var flatten = require('flat');
var byline = require('byline');
var lambdaUtil = require('../../../lambda-util');
var lineTrans = new byline.LineStream();
var jsonStream = require("json-stream");
// use pipe deal with the data from standard in
// and output the result to stdout
process.stdin
  .pipe(lineTrans)
  .pipe(eventStream.through(removeLineEnding))
  .pipe(eventStream.through(parseFunction))
  .pipe(eventStream.through(parseToken))
  .pipe(process.stdout);

var buf = '';

function removeLineEnding(data) {

  var line = String(data);

  if (_.endsWith(line, '-')) {
    buf = line;
  } else {
    this.emit('data', buf + line);
  }
}

function parseFunction(data) {
  var regex = /(\d{4}-\d\d-\d\d \d\d:\d\d:\d\d\.\d{3})\s(\[.*\])\sINFO\s\s(.*)\s-\s*(\w+)\s([\w.]*)\(.*\)\|\|\|(.+?)\|\|(.*)/i;
  data = data.replace(/\\r\\n/g,"");
  data = data.replace(/\\n/g,"");
  if (regex.test(data)) {

    var found = data.match(regex);
    var proces = getHttpNio(found[2]);
    var logController = found[3];
    var returnType = found[4];
    var functionName = found[5];
    var functionInfo = getFunctionNameInfo(functionName);

    // Only get selected function controllers and operations
    // if (_.all(selectedControllers, function(v) { return v !== functionInfo.controller; }) ||
    //     _.all(selectedOperations, function(v) { return v !== functionInfo.operation; })) {
    //   return;
    // }
    if(functionInfo.operation == 'productDetail') {

      var regexprouctDetail =/(\w+-\d+-\d+)\|(\w+)/i;
      var params = found[6];
      if(regexprouctDetail.test(params)) {
         var foundProductDetail = params.match(regexprouctDetail);
         var paramsInfo = {};
         paramsInfo['token'] = foundProductDetail[1];
         paramsInfo['productid'] = foundProductDetail[2];
      }
    } else {
      var params = found[6];
      var paramsInfo = getParamsInfo(params);
    }

    try {
      if (returnType == 'Result') {
        var result = JSON.parse(found[7]);
        if (result.content.product) {
          delete result.content.product.extraInfo;
        }
      }else if (returnType == 'Map'){
        var result = getMapResult(found[7]);
      }else {
        var result = found[7];
      }
    }catch (params){
      var result = {};
      result['result'] = '';
    }

    var info = {
      '时间': moment(found[1]).format(),
      '日志类型': (found[3]+'_'+functionInfo.controllerType+'.'+functionInfo.operation).toLowerCase(),
      process : proces,
      logController:found[3],
      returnType:found[4],
      functionName: functionName
    };

    var flattenResult = flatten({ result: result }, { delimiter: '_' });
    var flattenParams = flatten({params:paramsInfo},{delimiter: '_' });
    info = _.assign(info, functionInfo, flattenParams, flattenResult);
  
    var messageSegments = _.map(info, function(v, k) { return format('{0}[{1}]', k, v); });

    var message = messageSegments.join(',') + '\n';
    this.emit('data', message);
  }
}

function getFunctionNameInfo(functionName) {
  var regex = /com\.migu\.platform\.\w+\.\w+\.controller\.(\w+)\.(\w+)\.?(.*)\.?(.*)/i;
  var cfg = 'CFG';
  if (regex.test(functionName)) {

    var found = functionName.match(regex);
    if (found[3].size == 0) {
      return {
        gameEnd: found[1],
        controllerType: found[2],
        operation: cfg 
      };
    }
    if (found[4].size > 0) {
      return {
        gameEnd: found[1],
        controllerType: found[2],
        operation: found[4] 
      };
    }
    return {
      gameEnd: found[1],
      controllerType: found[2],
      operation: found[3] 
    };
  }
  return {};
}

//clear params
function getParamsInfo(params) {

    var regexMap = /\{[\w-]+\=[\w-]+.*\}/g;
    if (regexMap.test(params)) {
      var tokenMap = getMapResult(params);
      return tokenMap;
    }

    var regexTokenJson = /(\w+-\d+-\d+)\|(\{.*\:.*\})/i;
   
    if (regexTokenJson.test(params)) {
      var found = params.match(regexTokenJson);
      var paramJson = JSON.parse(found[2]);
      paramJson['token'] = found[1];
      return paramJson;
    }

    var  regexJson = /\{.*\:.*\}/g;
    
    if (regexJson.test(params)) {
      var found = params.match(regexJson);
      var params = JSON.parse(found);
      return params;
    }
    var regexToken = /(\w+-\d+-\d+)/g;
    if (regexToken.test(params)) {
      var found = params.match(regexToken);
      var token = {};
      token['token'] = found[0];
      return token;
    }
    var result = {};
    result['params'] = params;
    return result;
}

//sub process
function getHttpNio(process) {
  var result = process.substring(1,process.length-1);
  return result;
}


//map translate json
function getMapResult(result) {
  result = result.replace(/[\{\}]/g, '');
  var array = result.split(', ');
  var result = {};
  _.forEach(array, function(unit) {
    var kv = unit.split('=');
    result[kv[0]] = kv[1];
  })
  return result;
}

function parseToken(data) {
  var regex = /token\[(\w+)-(\d+)-(\d+?)\]/i;
  if (regex.test(data)) {
    var token = data.match(regex);
    var userid = token[2];
    var roleid = token[3];
    var dataStr = data.split(',');
    if(userid) {
      data =  'userid[' + userid + ']' + ',' + data;
    }
    if(roleid) {
      data = 'roleid[' + roleid + ']' + ',' + data;
    }
  }
  this.push(data);
}
