#!/usr/bin/env node
/**
 * This is a tool to split sql backup into csv files
 *
 */

'use strict';

//var assert = require('assert');
var byline = require('byline');
var fs = require('fs');
var program = require('commander');
var eventStream = require('event-stream');
var moment = require('moment');
var _ = require('lodash');
var csv = require('csv-formatter');
var streamify = require('stream-array');
var parse = require('csv-parse');

program.version('0.1.0')
  .option('-F, --file <file to read>', 'Specify the file to read, get the absoulate path to read')
  .parse(process.argv);

process.stdin.setEncoding('utf8');

var dbName;
var headers;
var status = false;
var element = [];
var linestream = new byline.LineStream();
var parser;
var ldp_branch_name;
var ldp_server_name;
var ldp_server_id;

fs.createReadStream('./' + program.file)
  .pipe(linestream)
  .pipe(eventStream.map(getATable));

function getATable(data) {
  data = String(data);
  //确定数据库表的名字以及头部
  var regDB = /COPY (.*) \((.*)\) FROM stdin/;
  //确定数据库表的结尾
  var regDBEnd = /^\\\./;
  //识别文件名，文件命名规则: 20151118.xiaomi2.sql
  var regFilename = /.*\.([a-zA-Z]+)(\d+)\.sql/;
  if (regFilename.test(program.file)) {
    // 得到渠道名，服务器名，服务器id
    ldp_server_name = program.file.match(regFilename)[1] + program.file.match(regFilename)[2];
    ldp_branch_name = program.file.match(regFilename)[1];
    ldp_server_id = program.file.match(regFilename)[2];
  } else {
    throw program.file + ' is error, mismatch';
  }

  if (status && data !== '\\.') {
    data = data.replace('\\N', '');
    data = data + '\t' + ldp_branch_name+ '\t' + ldp_server_name + '\t' + ldp_server_id;
    element.push(data + '\n');
  }

  if (regDB.test(data)) {
    //console.log("data: " + typeof  data);
    dbName = data.match(regDB)[1];
    var oldHeaders = data.match(regDB)[2].split(',');
    headers = _.map(oldHeaders, function(value) {
      return value.replace(/^\s+/g,"").replace(/\s+$/g,"").replace(/\"/g, '');
      //console.log("value: " + value);
    });
    console.log("hh: " + dbName + "--" + headers);
    parser = parse({delimiter: '\t', columns: headers, quote: ''});
    //console.log("headers: " + headers);
    status = true;
  }

  if (regDBEnd.test(data)) {
    headers.push('ldp_branch_name');
    headers.push('ldp_server_name');
    headers.push('ldp_server_id');
    streamify(element)
      .pipe(parser)
      .pipe(csv({
        separator: ',', // specify optional cell separator
        newline: '\n', // specify a newline character
        headers: headers
      }))
      .pipe(fs.createWriteStream(dbName + '.sunyonggang'));
    element = [];
    status = false;
  }
}