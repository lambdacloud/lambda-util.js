#!/usr/bin/env node
/**
 * This is a tool to flat core_user_db type, flatten its jheros
 */
var program = require('commander');
var _ = require('lodash');
var jsonStream = require("json-stream");
var eventStream = require('event-stream');
var SHA256 = require("crypto-js/sha256");

//use stream, json2MoreMessage to pipe data to standard output
var lambdaUtil = require('../../../lambda-util');
var stream = jsonStream();
var jsonLine = new lambdaUtil.JsonLine();

process.stdin.setEncoding('utf8');

// use pipe deal with the data from standard in
process.stdin
  .pipe(stream)
  .pipe(eventStream.through(json2MoreMessage))
  .pipe(jsonLine)
  .pipe(process.stdout);

function json2MoreMessage(data) {
  // distinguish the data source
  var self = this;
  var oneMessage = {};
  //这边需要使用curl去查看具体core_user_db的数据，从其中分割出jheros字段
  //这里是用的 ‘＋7’， ‘－2’，是由于需要匹配到jheros的需要
  var start = data._source.message.indexOf('jheros') + 7;
  var end = data._source.message.indexOf('jprods[') - 2;
  //得到jheros后，将它parse为json，然后再作处理
  var heroJsons;
  try {
    heroJsons = JSON.parse(data._source.message.substring(start, end));
  } catch(err) {
    throw err;
  }
  //给oneMessage赋值，每得到一个元素就将它发送，具体字段根据需求来设置
  _.forEach(heroJsons, function(value, key) {
    oneMessage._source = _.clone(data._source, true);
    oneMessage._source.jhero__key = key;
    _.forEach(value, function(v, k) {
      oneMessage._source['jhero_' + k] = v;
    });
    oneMessage._index = data._index;
    oneMessage._type = 'core_user_db__flat_jheros';
    oneMessage._source.ldp_origin_type = data._source['log_type'];
    oneMessage._source.ldp_origin_id = data._id;
    oneMessage._id = SHA256(JSON.stringify(oneMessage)).toString();
    self.push(oneMessage);
  });
}